# Top level entry required to mark this as a global AnalyzerConfig file
is_global = true

#### Syntax rules ####
# Default settings
[*]
insert_final_newline = true
indent_style = space
indent_size = 4
charset = utf-8
end_of_line = lf
trim_trailing_whitespace = true

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj,fsproj}]
indent_size = 2

# Xml files
[*.{xml,stylecop,resx,ruleset}]
indent_size = 2

# Xml config files
[*.{props,targets,config,nuspec}]
indent_size = 2

# Windows scripting files
[*.{cmd, bat, ps, ps1, psd1, psm1}]
end_of_line = crlf


#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# Naming styles

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_separate_import_directive_groups = false

dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_namespace_match_folder = true:suggestion
dotnet_style_readonly_field = true:suggestion
dotnet_style_predefined_type_for_locals_parameters_members = true:silent
dotnet_style_predefined_type_for_member_access = true:silent
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent
dotnet_style_allow_multiple_blank_lines_experimental = true:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent

# Rider-specific preferences
indent_style = space
indent_size = 4
end_of_line = crlf
charset = utf-8-bom
trim_trailing_whitespace = true
insert_final_newline = true
max_line_length = 120

# Rider code inspection preferences
dotnet_style_prefer_conditional_expression_over_assignment = false:silent
dotnet_style_prefer_conditional_expression_over_return = false:silent
dotnet_style_qualification_for_property = false:silent
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_method = false:silent
dotnet_style_qualification_for_event = false:silent
csharp_indent_labels = one_less_than_current
csharp_using_directive_placement = outside_namespace:silent
csharp_prefer_simple_using_statement = true:suggestion
csharp_prefer_braces = when_multiline:suggestion
csharp_style_namespace_declarations = file_scoped:error
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_primary_constructors = false:warning
csharp_prefer_system_threading_lock = true:suggestion
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent
csharp_space_around_binary_operators = before_and_after
csharp_style_throw_expression = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent
csharp_prefer_static_local_function = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_prefer_static_anonymous_function = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:silent

### .Net Analyzers
dotnet_diagnostic.CA1416.severity = error # Validate platform compatibility
dotnet_diagnostic.CA1417.severity = error # Do not use 'OutAttribute' on string parameters for P/Invokes
dotnet_diagnostic.CA1418.severity = error # Use valid platform string
dotnet_diagnostic.CA1420.severity = error # Property, type, or attribute requires runtime marshalling
dotnet_diagnostic.CA1422.severity = error # Validate platform compatibility
dotnet_diagnostic.CA1501.severity = error # Avoid excessive inheritance
dotnet_diagnostic.CA1502.severity = error # Avoid excessive complexity
dotnet_diagnostic.CA1505.severity = error # Avoid unmaintainable code
dotnet_diagnostic.CA1506.severity = error # Avoid excessive class coupling
dotnet_diagnostic.CA1507.severity = error # Use nameof to express symbol names
dotnet_diagnostic.CA1508.severity = error # Avoid dead conditional code
dotnet_diagnostic.CA1509.severity = error # Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1510.severity = error # Use ArgumentNullException throw helper
dotnet_diagnostic.CA1511.severity = error # Use ArgumentException throw helper
dotnet_diagnostic.CA1512.severity = error # Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1513.severity = error # Use ObjectDisposedException throw helper
dotnet_diagnostic.CA1514.severity = error # Avoid redundant length argument
dotnet_diagnostic.CA1810.severity = error # Initialize reference type static fields inline
dotnet_diagnostic.CA1812.severity = suggestion # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1813.severity = error # Avoid unsealed attributes
dotnet_diagnostic.CA1814.severity = error # Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1815.severity = error # Override equals and operator equals on value types
dotnet_diagnostic.CA1819.severity = suggestion # Properties should not return arrays
dotnet_diagnostic.CA1820.severity = error # Test for empty strings using string length
dotnet_diagnostic.CA1821.severity = error # Remove empty Finalizers
dotnet_diagnostic.CA1822.severity = error # Mark members as static
dotnet_diagnostic.CA1823.severity = error # Avoid unused private fields
dotnet_diagnostic.CA1825.severity = error # Avoid zero-length array allocations
dotnet_diagnostic.CA1826.severity = error # Do not use Enumerable methods on indexable collections
dotnet_diagnostic.CA1827.severity = error # Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1828.severity = error # Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1829.severity = error # Use Length/Count property instead of Count() when available
dotnet_diagnostic.CA1830.severity = error # Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1831.severity = error # Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1832.severity = error # Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1833.severity = error # Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1834.severity = error # Consider using 'StringBuilder.Append(char)' when applicable
dotnet_diagnostic.CA1835.severity = error # Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1836.severity = error # Prefer IsEmpty over Count
dotnet_diagnostic.CA1837.severity = error # Use 'Environment.ProcessId'
dotnet_diagnostic.CA1838.severity = error # Avoid 'StringBuilder' parameters for P/Invokes
dotnet_diagnostic.CA1839.severity = error # Use 'Environment.ProcessPath'
dotnet_diagnostic.CA1840.severity = error # Use 'Environment.CurrentManagedThreadId'
dotnet_diagnostic.CA1841.severity = error # Prefer Dictionary.Contains methods
dotnet_diagnostic.CA1842.severity = error # Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1843.severity = error # Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1844.severity = error # Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1845.severity = error # Use span-based 'string.Concat'
dotnet_diagnostic.CA1846.severity = error # Prefer 'AsSpan' over 'Substring'
dotnet_diagnostic.CA1847.severity = error # Use char literal for a single character lookup
dotnet_diagnostic.CA1848.severity = error # Use the LoggerMessage delegates
dotnet_diagnostic.CA1849.severity = error # Call async methods when in an async method
dotnet_diagnostic.CA1850.severity = error # Prefer static 'HashData' method over 'ComputeHash'
dotnet_diagnostic.CA1851.severity = error # Possible multiple enumerations of 'IEnumerable' collection
dotnet_diagnostic.CA1853.severity = error # Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1854.severity = error # Prefer the 'IDictionary.TryGetValue(TKey, out TValue)' method
dotnet_diagnostic.CA1855.severity = error # Prefer 'Clear' over 'Fill'
dotnet_diagnostic.CA1857.severity = error # A constant is expected for the parameter
dotnet_diagnostic.CA1858.severity = error # Use 'StartsWith' instead of 'IndexOf'
dotnet_diagnostic.CA1859.severity = error # Use concrete types when possible for improved performance
dotnet_diagnostic.CA1860.severity = error # Avoid using 'Enumerable.Any()' extension method
dotnet_diagnostic.CA1861.severity = suggestion # Avoid constant arrays as arguments
dotnet_diagnostic.CA1862.severity = error # Use the 'StringComparison' method overloads to perform case-insensitive string comparisons
dotnet_diagnostic.CA1863.severity = error # Use 'CompositeFormat'
dotnet_diagnostic.CA1864.severity = error # Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
dotnet_diagnostic.CA1865.severity = error # Use char overload
dotnet_diagnostic.CA1866.severity = error # Use char overload
dotnet_diagnostic.CA1867.severity = error # Use char overload
dotnet_diagnostic.CA1868.severity = error # Unnecessary call to 'Contains(item)'
dotnet_diagnostic.CA1869.severity = error # Cache and reuse 'JsonSerializerOptions' instances
dotnet_diagnostic.CA1870.severity = error # Use a cached 'SearchValues' instance
dotnet_diagnostic.CA1871.severity = error # Do not pass a nullable struct to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA1872.severity = error # Prefer 'Convert.ToHexString' and 'Convert.ToHexStringLower' over call chains based on 'BitConverter.ToString'
dotnet_diagnostic.CA2000.severity = error # Dispose objects before losing scope
dotnet_diagnostic.CA2002.severity = error # Do not lock on objects with weak identity
dotnet_diagnostic.CA2007.severity = none # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2008.severity = error # Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2009.severity = error # Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2011.severity = error # Avoid infinite recursion
dotnet_diagnostic.CA2012.severity = error # Use ValueTasks correctly
dotnet_diagnostic.CA2013.severity = error # Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2014.severity = error # Do not use stackalloc in loops
dotnet_diagnostic.CA2015.severity = error # Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2016.severity = error # Forward the 'CancellationToken' parameter to methods
dotnet_diagnostic.CA2017.severity = error # Parameter count mismatch
dotnet_diagnostic.CA2018.severity = error # 'Buffer.BlockCopy' expects the number of bytes to be copied for the 'count' argument
dotnet_diagnostic.CA2019.severity = error # Improper 'ThreadStatic' field initialization
dotnet_diagnostic.CA2020.severity = warning # Prevent behavioral change
dotnet_diagnostic.CA2021.severity = error # Do not call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types
dotnet_diagnostic.CA2022.severity = error # Avoid inexact read with 'Stream.Read'
dotnet_diagnostic.CA2119.severity = error # Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2243.severity = error # Attribute string literals should parse correctly
dotnet_diagnostic.CA2245.severity = error # Do not assign a property to itself
dotnet_diagnostic.CA2247.severity = error # Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2248.severity = error # Provide correct 'enum' argument to 'Enum.HasFlag'
dotnet_diagnostic.CA2249.severity = error # Consider using 'string.Contains' instead of 'string.IndexOf'
dotnet_diagnostic.CA2250.severity = error # Use 'ThrowIfCancellationRequested'
dotnet_diagnostic.CA2251.severity = error # Use 'string.Equals'
dotnet_diagnostic.CA2256.severity = error # All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
dotnet_diagnostic.CA2257.severity = error # Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
dotnet_diagnostic.CA2258.severity = error # Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
dotnet_diagnostic.CA2259.severity = error # 'ThreadStatic' only affects static fields
dotnet_diagnostic.CA2261.severity = error # Do not use ConfigureAwaitOptions.SuppressThrowing with Task<TResult>
dotnet_diagnostic.CA2264.severity = error # Do not pass a non-nullable value to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA2265.severity = error # Do not compare Span<T> to 'null' or 'default'

### Diagnostic Settings
dotnet_code_quality_unused_parameters = all:suggestion
dotnet_code_quality.CA1822.api_surface = private, internal # Mark members as static

### Roslynator
dotnet_diagnostic.RCS1001.severity = error # Add braces (when expression spans over multiple lines)
dotnet_diagnostic.RCS1021.severity = error # Convert lambda expression body to expression body
dotnet_diagnostic.RCS1036.severity = none # Remove unnecessary blank line
dotnet_diagnostic.RCS1037.severity = none # Remove trailing white-space
dotnet_diagnostic.RCS1049.severity = error # Simplify boolean comparison
dotnet_diagnostic.RCS1077.severity = error # Optimize LINQ method call
dotnet_diagnostic.RCS1078.severity = error # Use "" or 'string.Empty'
dotnet_diagnostic.RCS1080.severity = error # Use 'Count/Length' property instead of 'Any' method
dotnet_diagnostic.RCS1085.severity = error # Use auto-implemented property
dotnet_diagnostic.RCS1090.severity = error # Add/remove 'ConfigureAwait(false)' call
dotnet_diagnostic.RCS1118.severity = error # Mark local variable as const
dotnet_diagnostic.RCS1133.severity = error # Remove redundant Dispose/Close call
dotnet_diagnostic.RCS1146.severity = error # Use conditional access
dotnet_diagnostic.RCS1155.severity = error # Use StringComparison when comparing strings
dotnet_diagnostic.RCS1163.severity = suggestion # Unused parameter
dotnet_diagnostic.RCS1176.severity = none # [deprecated] Use 'var' instead of explicit type (when the type is not obvious)
dotnet_diagnostic.RCS1180.severity = error # Inline lazy initialization
dotnet_diagnostic.RCS1194.severity = none
dotnet_diagnostic.RCS1197.severity = error # Optimize StringBuilder.Append/AppendLine call
dotnet_diagnostic.RCS1201.severity = error # Use method chaining
dotnet_diagnostic.RCS1213.severity = error # Remove unused member declaration
dotnet_diagnostic.RCS1217.severity = error # Convert interpolated string to concatenation
dotnet_diagnostic.RCS1220.severity = error # Use pattern matching instead of combination of 'is' operator and cast operator
dotnet_diagnostic.RCS1221.severity = error # Use pattern matching instead of combination of 'as' operator and null check
dotnet_diagnostic.RCS1233.severity = error # Use short-circuiting operator
dotnet_diagnostic.RCS1234.severity = error # Duplicate enum value
dotnet_diagnostic.RCS1235.severity = error # Optimize method call
dotnet_diagnostic.RCS1236.severity = error # Use exception filter
dotnet_diagnostic.RCS1238.severity = error # Avoid nested ?: operators
dotnet_diagnostic.RCS1239.severity = error # Use 'for' statement instead of 'while' statement
dotnet_diagnostic.RCS1240.severity = error # Operator is unnecessary
dotnet_diagnostic.RCS1243.severity = error # Duplicate word in a comment
dotnet_diagnostic.RCS1246.severity = error # Use element access
dotnet_diagnostic.RCS1248.severity = error # Normalize null check
dotnet_diagnostic.RCS1249.severity = error # Unnecessary null-forgiving operator
dotnet_diagnostic.RCS1250.severity = error # Use implicit/explicit object creation
dotnet_diagnostic.RCS1251.severity = error # Remove unnecessary braces from record declaration
dotnet_diagnostic.RCS1252.severity = error # Normalize usage of infinite loop
dotnet_diagnostic.RCS1254.severity = error # Normalize format of enum flag value
dotnet_diagnostic.RCS1255.severity = error # Simplify argument null check
dotnet_diagnostic.RCS1256.severity = none # Invalid argument null check
dotnet_diagnostic.RCS1259.severity = error # Remove empty syntax
dotnet_diagnostic.RCS1261.severity = error # Resource can be disposed asynchronously
dotnet_diagnostic.RCS1262.severity = error # Unnecessary raw string literal
dotnet_diagnostic.RCS1263.severity = error # Invalid reference in a documentation comment
dotnet_diagnostic.RCS1265.severity = error # Remove redundant catch block
dotnet_diagnostic.RCS1266.severity = error # Use raw string literal
dotnet_diagnostic.RCS1267.severity = error # Use string interpolation instead of 'string.Concat'
dotnet_diagnostic.RCS1268.severity = error # Simplify numeric comparison

### StyleCop
dotnet_diagnostic.SA0001.severity = none # XML comment analysis disabled
dotnet_diagnostic.SA1000.severity = error # Keywords should be spaced correctly
dotnet_diagnostic.SA1001.severity = error # Commas should be spaced correctly
dotnet_diagnostic.SA1002.severity = error # Semicolons should be spaced correctly
dotnet_diagnostic.SA1003.severity = error # Symbols should be spaced correctly
dotnet_diagnostic.SA1004.severity = error # Documentation lines should begin with single space
dotnet_diagnostic.SA1005.severity = error # Single line comments should begin with single space
dotnet_diagnostic.SA1006.severity = error # Preprocessor keywords should not be preceded by space
dotnet_diagnostic.SA1007.severity = error # Operator keyword should be followed by space
dotnet_diagnostic.SA1008.severity = error # Opening parenthesis should be spaced correctly
dotnet_diagnostic.SA1009.severity = error # Closing parenthesis should be spaced correctly
dotnet_diagnostic.SA1010.severity = error # Opening square brackets should be spaced correctly
dotnet_diagnostic.SA1011.severity = error # Closing square brackets should be spaced correctly
dotnet_diagnostic.SA1012.severity = error # Opening braces should be spaced correctly
dotnet_diagnostic.SA1013.severity = error # Closing braces should be spaced correctly
dotnet_diagnostic.SA1014.severity = error # Opening generic brackets should be spaced correctly
dotnet_diagnostic.SA1015.severity = error # Closing generic brackets should be spaced correctly
dotnet_diagnostic.SA1016.severity = error # Opening attribute brackets should be spaced correctly
dotnet_diagnostic.SA1017.severity = error # Closing attribute brackets should be spaced correctly
dotnet_diagnostic.SA1018.severity = error # Nullable type symbols should be spaced correctly
dotnet_diagnostic.SA1019.severity = error # Member access symbols should be spaced correctly
dotnet_diagnostic.SA1020.severity = error # Increment decrement symbols should be spaced correctly
dotnet_diagnostic.SA1021.severity = error # Negative signs should be spaced correctly
dotnet_diagnostic.SA1022.severity = error # Positive signs should be spaced correctly
dotnet_diagnostic.SA1023.severity = error # Dereference and access of symbols should be spaced correctly
dotnet_diagnostic.SA1024.severity = error # Colons Should Be Spaced Correctly
dotnet_diagnostic.SA1025.severity = error # Code should not contain multiple whitespace in a row
dotnet_diagnostic.SA1026.severity = error # Code should not contain space after new or stackalloc keyword in implicitly typed array allocation
dotnet_diagnostic.SA1027.severity = error # Use tabs correctly
dotnet_diagnostic.SA1028.severity = none # Code should not contain trailing whitespace
dotnet_diagnostic.SA1100.severity = error # Do not prefix calls with base unless local implementation exists
dotnet_diagnostic.SA1101.severity = none # Prefix local calls with this
dotnet_diagnostic.SA1102.severity = error # Query clause should follow previous clause
dotnet_diagnostic.SA1103.severity = error # Query clauses should be on separate lines or all on one line
dotnet_diagnostic.SA1104.severity = error # Query clause should begin on new line when previous clause spans multiple lines
dotnet_diagnostic.SA1105.severity = error # Query clauses spanning multiple lines should begin on own line
dotnet_diagnostic.SA1106.severity = error # Code should not contain empty statements
dotnet_diagnostic.SA1107.severity = error # Code should not contain multiple statements on one line
dotnet_diagnostic.SA1110.severity = error # Opening parenthesis or bracket should be on declaration line
dotnet_diagnostic.SA1111.severity = error # Closing parenthesis should be on line of last parameter
dotnet_diagnostic.SA1112.severity = error # Closing parenthesis should be on line of opening parenthesis
dotnet_diagnostic.SA1113.severity = error # Comma should be on the same line as previous parameter
dotnet_diagnostic.SA1114.severity = error # Parameter list should follow declaration
dotnet_diagnostic.SA1115.severity = error # Parameter should follow comma
dotnet_diagnostic.SA1116.severity = error # Split parameters should start on line after declaration
dotnet_diagnostic.SA1117.severity = error # Parameters should be on same line or separate lines
dotnet_diagnostic.SA1118.severity = suggestion # Parameter should not span multiple lines
dotnet_diagnostic.SA1119.severity = error # Statement should not use unnecessary parenthesis
dotnet_diagnostic.SA1120.severity = error # Comments should contain text
dotnet_diagnostic.SA1121.severity = error # Use built-in type alias
dotnet_diagnostic.SA1122.severity = none # Use string.Empty for empty strings
dotnet_diagnostic.SA1123.severity = error # Do not place regions within elements
dotnet_diagnostic.SA1124.severity = error # Do not use regions
dotnet_diagnostic.SA1125.severity = error # Use shorthand for nullable types
dotnet_diagnostic.SA1127.severity = error # Generic type constraints should be on their own line
dotnet_diagnostic.SA1128.severity = error # Put constructor initializers on their own line
dotnet_diagnostic.SA1129.severity = error # Do not use default value type constructor
dotnet_diagnostic.SA1130.severity = error # Use lambda syntax
dotnet_diagnostic.SA1131.severity = error # Use readable conditions
dotnet_diagnostic.SA1132.severity = error # Do not combine fields
dotnet_diagnostic.SA1133.severity = error # Do not combine attributes
dotnet_diagnostic.SA1134.severity = suggestion # Attributes should not share line
dotnet_diagnostic.SA1135.severity = error # Using directives should be qualified
dotnet_diagnostic.SA1136.severity = error # Enum values should be on separate lines
dotnet_diagnostic.SA1137.severity = error # Elements should have the same indentation
dotnet_diagnostic.SA1139.severity = error # Use literal suffix notation instead of casting
dotnet_diagnostic.SA1141.severity = error # Use tuple syntax
dotnet_diagnostic.SA1142.severity = error # Refer to tuple fields by name
dotnet_diagnostic.SA1200.severity = error # Using directives should be placed correctly
dotnet_diagnostic.SA1201.severity = error # Elements should appear in the correct order
dotnet_diagnostic.SA1202.severity = error # Elements should be ordered by access
dotnet_diagnostic.SA1203.severity = error # Constants should appear before fields
dotnet_diagnostic.SA1204.severity = error # Static elements should appear before instance elements
dotnet_diagnostic.SA1205.severity = error # Partial elements should declare access
dotnet_diagnostic.SA1206.severity = error # Declaration keywords should follow order
dotnet_diagnostic.SA1207.severity = error # Protected should come before internal
dotnet_diagnostic.SA1208.severity = error # System using directives should be placed before other using directives
dotnet_diagnostic.SA1209.severity = error # Using alias directives should be placed after other using directives
dotnet_diagnostic.SA1210.severity = error # Using directives should be ordered alphabetically by namespace
dotnet_diagnostic.SA1211.severity = error # Using alias directives should be ordered alphabetically by alias name
dotnet_diagnostic.SA1212.severity = error # Property accessors should follow order
dotnet_diagnostic.SA1213.severity = error # Event accessors should follow order
dotnet_diagnostic.SA1214.severity = error # Readonly fields should appear before non-readonly fields
dotnet_diagnostic.SA1216.severity = error # Using static directives should be placed at the correct location
dotnet_diagnostic.SA1217.severity = error # Using static directives should be ordered alphabetically
dotnet_diagnostic.SA1300.severity = error # Element should begin with upper-case letter
dotnet_diagnostic.SA1302.severity = error # Interface names should begin with I
dotnet_diagnostic.SA1303.severity = error # Const field names should begin with upper-case letter
dotnet_diagnostic.SA1304.severity = error # Non-private readonly fields should begin with upper-case letter
dotnet_diagnostic.SA1305.severity = suggestion # Field names should not use Hungarian notation
dotnet_diagnostic.SA1309.severity = none # Field names should not begin with underscore
dotnet_diagnostic.SA1311.severity = error # Static readonly fields should begin with upper-case letter
dotnet_diagnostic.SA1312.severity = suggestion # Variable should begin with lower-case letter
dotnet_diagnostic.SA1313.severity = suggestion # Parameter names should begin with lower-case letter
dotnet_diagnostic.SA1314.severity = error # Type parameter names should begin with T
dotnet_diagnostic.SA1316.severity = error # Tuple element names should use correct casing
dotnet_diagnostic.SA1400.severity = error # Access modifier should be declared
dotnet_diagnostic.SA1401.severity = error # Fields should be private
dotnet_diagnostic.SA1402.severity = error # File may only contain a single type
dotnet_diagnostic.SA1403.severity = error # File may only contain a single namespace
dotnet_diagnostic.SA1404.severity = error # Code analysis suppression should have justification
dotnet_diagnostic.SA1405.severity = error # Debug.Assert should provide message text
dotnet_diagnostic.SA1406.severity = error # Debug.Fail should provide message text
dotnet_diagnostic.SA1407.severity = error # Arithmetic expressions should declare precedence
dotnet_diagnostic.SA1408.severity = error # Conditional expressions should declare precedence
dotnet_diagnostic.SA1410.severity = error # Remove delegate parenthesis when possible
dotnet_diagnostic.SA1411.severity = error # Attribute constructor should not use unnecessary parenthesis
dotnet_diagnostic.SA1412.severity = none # Store files as UTF-8 with byte order mark
dotnet_diagnostic.SA1413.severity = none # Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1414.severity = error # Tuple types in signatures should have element names
dotnet_diagnostic.SA1500.severity = suggestion # Braces for multi-line statements should not share line
dotnet_diagnostic.SA1501.severity = error # Statement should not be on a single line
dotnet_diagnostic.SA1502.severity = error # Element should not be on a single line
dotnet_diagnostic.SA1503.severity = none # Braces should not be omitted
dotnet_diagnostic.SA1504.severity = suggestion # All accessors should be single-line or multi-line
dotnet_diagnostic.SA1505.severity = error # Opening braces should not be followed by blank line
dotnet_diagnostic.SA1506.severity = error # Element documentation headers should not be followed by blank line
dotnet_diagnostic.SA1507.severity = error # Code should not contain multiple blank lines in a row
dotnet_diagnostic.SA1508.severity = error # Closing braces should not be preceded by blank line
dotnet_diagnostic.SA1509.severity = error # Opening braces should not be preceded by blank line
dotnet_diagnostic.SA1510.severity = error # Chained statement blocks should not be preceded by blank line
dotnet_diagnostic.SA1511.severity = error # While-do footer should not be preceded by blank line
dotnet_diagnostic.SA1512.severity = error # Single-line comments should not be followed by blank line
dotnet_diagnostic.SA1513.severity = error # Closing brace should be followed by blank line
dotnet_diagnostic.SA1514.severity = error # Element documentation header should be preceded by blank line
dotnet_diagnostic.SA1515.severity = error # Single-line comment should be preceded by blank line
dotnet_diagnostic.SA1516.severity = error # Elements should be separated by blank line
dotnet_diagnostic.SA1517.severity = error # Code should not contain blank lines at start of file
dotnet_diagnostic.SA1518.severity = error # Use line endings correctly at end of file
dotnet_diagnostic.SA1519.severity = error # Braces should not be omitted from multi-line child statement
dotnet_diagnostic.SA1520.severity = none # Use braces consistently
dotnet_diagnostic.SA1600.severity = none # Elements should be documented
dotnet_diagnostic.SA1601.severity = none # Partial elements should be documented
dotnet_diagnostic.SA1602.severity = none # Enumeration items should be documented
dotnet_diagnostic.SA1604.severity = error # Element documentation should have summary
dotnet_diagnostic.SA1605.severity = error # Partial element documentation should have summary
dotnet_diagnostic.SA1606.severity = error # Element documentation should have summary text
dotnet_diagnostic.SA1607.severity = error # Partial element documentation should have summary text
dotnet_diagnostic.SA1608.severity = error # Element documentation should not have default summary
dotnet_diagnostic.SA1609.severity = none # Property documentation should have value
dotnet_diagnostic.SA1610.severity = none # Property documentation should have value text
dotnet_diagnostic.SA1611.severity = none # Element parameters should be documented
dotnet_diagnostic.SA1612.severity = error # Element parameter documentation should match element parameters
dotnet_diagnostic.SA1613.severity = error # Element parameter documentation should declare parameter name
dotnet_diagnostic.SA1614.severity = error # Element parameter documentation should have text
dotnet_diagnostic.SA1615.severity = none # Element return value should be documented
dotnet_diagnostic.SA1616.severity = error # Element return value documentation should have text
dotnet_diagnostic.SA1617.severity = error # Void return value should not be documented
dotnet_diagnostic.SA1618.severity = none # Generic type parameters should be documented
dotnet_diagnostic.SA1619.severity = none # Generic type parameters should be documented partial class
dotnet_diagnostic.SA1620.severity = error # Generic type parameter documentation should match type parameters
dotnet_diagnostic.SA1621.severity = error # Generic type parameter documentation should declare parameter name
dotnet_diagnostic.SA1622.severity = error # Generic type parameter documentation should have text
dotnet_diagnostic.SA1623.severity = error # Property summary documentation should match accessors
dotnet_diagnostic.SA1624.severity = error # Property summary documentation should omit accessor with restricted access
dotnet_diagnostic.SA1625.severity = error # Element documentation should not be copied and pasted
dotnet_diagnostic.SA1626.severity = error # Single-line comments should not use documentation style slashes
dotnet_diagnostic.SA1627.severity = error # Documentation text should not be empty
dotnet_diagnostic.SA1629.severity = error # Documentation text should end with a period
dotnet_diagnostic.SA1633.severity = none # File should have header
dotnet_diagnostic.SA1634.severity = none # File header should show copyright
dotnet_diagnostic.SA1635.severity = none # File header should have copyright text
dotnet_diagnostic.SA1636.severity = none # File header copyright text should match
dotnet_diagnostic.SA1637.severity = none # File header should contain file name
dotnet_diagnostic.SA1638.severity = none # File header file name documentation should match file name
dotnet_diagnostic.SA1639.severity = none # File header should have summary
dotnet_diagnostic.SA1640.severity = none # File header should have valid company text
dotnet_diagnostic.SA1641.severity = none # File header company name text should match
dotnet_diagnostic.SA1642.severity = error # Constructor summary documentation should begin with standard text
dotnet_diagnostic.SA1643.severity = error # Destructor summary documentation should begin with standard text
dotnet_diagnostic.SA1648.severity = error # inheritdoc should be used with inheriting class
dotnet_diagnostic.SA1649.severity = error # File name should match first type name
dotnet_diagnostic.SA1651.severity = error # Do not use placeholder elements

# .NET style rules static analysis
dotnet_diagnostic.IDE0001.severity = error # Simplify name
dotnet_diagnostic.IDE0002.severity = error # Simplify member access
dotnet_diagnostic.IDE0003.severity = none # this and Me preferences
dotnet_diagnostic.IDE0004.severity = error # Remove unnecessary cast
dotnet_diagnostic.IDE0005.severity = error # Remove unnecessary using directives
dotnet_diagnostic.IDE0007.severity = suggestion # 'var' preferences
dotnet_diagnostic.IDE0008.severity = suggestion # 'var' preferences
dotnet_diagnostic.IDE0009.severity = none # this and Me preferences
dotnet_diagnostic.IDE0010.severity = suggestion # Add missing cases to switch statement
dotnet_diagnostic.IDE0011.severity = suggestion # Add braces
dotnet_diagnostic.IDE0016.severity = error # Use throw expression
dotnet_diagnostic.IDE0018.severity = error # Inline variable declaration
dotnet_diagnostic.IDE0019.severity = error # Use pattern matching to avoid 'as' followed by 'null' check
dotnet_diagnostic.IDE0020.severity = error # Use pattern matching to avoid 'is' check followed by a cast
dotnet_diagnostic.IDE0021.severity = suggestion # Use expression body for constructors
dotnet_diagnostic.IDE0022.severity = suggestion # Use expression body for methods
dotnet_diagnostic.IDE0023.severity = suggestion # Use expression body for operators
dotnet_diagnostic.IDE0024.severity = suggestion # Use expression body for operators
dotnet_diagnostic.IDE0025.severity = suggestion # Use expression body for properties
dotnet_diagnostic.IDE0026.severity = suggestion # Use expression body for indexers
dotnet_diagnostic.IDE0027.severity = suggestion # Use expression body for accessors
dotnet_diagnostic.IDE0028.severity = error # Use collection initializers
dotnet_diagnostic.IDE0029.severity = error # Null check can be simplified
dotnet_diagnostic.IDE0030.severity = error # Null check can be simplified
dotnet_diagnostic.IDE0031.severity = error # Use null propagation
dotnet_diagnostic.IDE0032.severity = error # Use auto-implemented property
dotnet_diagnostic.IDE0033.severity = error # Use explicitly provided tuple name
dotnet_diagnostic.IDE0034.severity = error # Simplify 'default' expression
dotnet_diagnostic.IDE0035.severity = suggestion # Remove unreachable code
dotnet_diagnostic.IDE0036.severity = error # Order modifiers
dotnet_diagnostic.IDE0037.severity = suggestion # Use inferred member names
dotnet_diagnostic.IDE0038.severity = error # Use pattern matching to avoid 'is' check followed by a cast
dotnet_diagnostic.IDE0039.severity = error # Use local function instead of lambda
dotnet_diagnostic.IDE0040.severity = error # Add accessibility modifiers
dotnet_diagnostic.IDE0041.severity = error # Use 'is null' check
dotnet_diagnostic.IDE0042.severity = suggestion # Deconstruct variable declaration
dotnet_diagnostic.IDE0044.severity = error # Add readonly modifier
dotnet_diagnostic.IDE0045.severity = suggestion # Use conditional expression for assignment
dotnet_diagnostic.IDE0046.severity = suggestion # Use conditional expression for return
dotnet_diagnostic.IDE0047.severity = none # Parentheses preferences
dotnet_diagnostic.IDE0048.severity = none # Parentheses preferences
dotnet_diagnostic.IDE0049.severity = error # Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0050.severity = error # Convert anonymous type to tuple
dotnet_diagnostic.IDE0051.severity = suggestion # Remove unused private member
dotnet_diagnostic.IDE0052.severity = suggestion # Remove unread private member
dotnet_diagnostic.IDE0053.severity = error # Use expression body for lambdas
dotnet_diagnostic.IDE0054.severity = error # Use compound assignment
dotnet_diagnostic.IDE0056.severity = suggestion # Use index operator
dotnet_diagnostic.IDE0057.severity = suggestion # Use range operator
dotnet_diagnostic.IDE0058.severity = suggestion # Remove unnecessary expression value
dotnet_diagnostic.IDE0059.severity = error # Remove unnecessary value assignment
dotnet_diagnostic.IDE0060.severity = suggestion # Remove unused parameter
dotnet_diagnostic.IDE0061.severity = suggestion # Use expression body for local functions
dotnet_diagnostic.IDE0062.severity = error # Make local function static
dotnet_diagnostic.IDE0063.severity = error # Use simple 'using' statement
dotnet_diagnostic.IDE0064.severity = error # Make struct fields writable
dotnet_diagnostic.IDE0065.severity = none # 'using' directive placement
dotnet_diagnostic.IDE0066.severity = suggestion # Use switch expression
dotnet_diagnostic.IDE0068.severity = error # Use explicit cast in foreach loop
dotnet_diagnostic.IDE0070.severity = error # Use 'System.HashCode.Combine'
dotnet_diagnostic.IDE0071.severity = error # Simplify interpolation
dotnet_diagnostic.IDE0072.severity = suggestion # Add missing cases to switch expression
dotnet_diagnostic.IDE0073.severity = none # Require file header
dotnet_diagnostic.IDE0074.severity = error # Use compound assignment
dotnet_diagnostic.IDE0078.severity = error # Use pattern matching
dotnet_diagnostic.IDE0079.severity = error # Remove unnecessary suppression
dotnet_diagnostic.IDE0080.severity = error # Remove unnecessary suppression operator
dotnet_diagnostic.IDE0081.severity = none # Remove ByVal - Visual Basic
dotnet_diagnostic.IDE0082.severity = error # Convert typeof to nameof
dotnet_diagnostic.IDE0083.severity = error # Use pattern matching (not operator)
dotnet_diagnostic.IDE0084.severity = none # Use pattern matching (IsNot operator) - Visual Basic
dotnet_diagnostic.IDE0090.severity = suggestion # Simplify new expression
dotnet_diagnostic.IDE0100.severity = error # Remove unnecessary equality operator
dotnet_diagnostic.IDE0110.severity = error # Remove unnecessary discard
dotnet_diagnostic.IDE0120.severity = error # Simplify LINQ expression
dotnet_diagnostic.IDE0130.severity = error # Namespace does not match folder structure
dotnet_diagnostic.IDE0140.severity = none # Simplify object creation - Visual Basic
dotnet_diagnostic.IDE0150.severity = error # Prefer 'null' check over type check
dotnet_diagnostic.IDE0160.severity = none # Namespace declaration preferences - block scope
dotnet_diagnostic.IDE0161.severity = error # Namespace declaration preferences - file scope
dotnet_diagnostic.IDE0170.severity = error # Simplify property pattern
dotnet_diagnostic.IDE0180.severity = error # Use tuple to swap values
dotnet_diagnostic.IDE0200.severity = error # Remove unnecessary lambda expression
dotnet_diagnostic.IDE0210.severity = none # Convert to top-level statements
dotnet_diagnostic.IDE0211.severity = suggestion # Convert to 'Program.Main' style program
dotnet_diagnostic.IDE0220.severity = error # Add explicit cast in foreach loop
dotnet_diagnostic.IDE0230.severity = error # Use UTF-8 string literal
dotnet_diagnostic.IDE0240.severity = error # Nullable directive is redundant
dotnet_diagnostic.IDE0241.severity = error # Nullable directive is unnecessary
dotnet_diagnostic.IDE0250.severity = error # Struct can be made 'readonly'
dotnet_diagnostic.IDE0251.severity = error # Member can be made 'readonly'
dotnet_diagnostic.IDE0260.severity = error # Use pattern matching
dotnet_diagnostic.IDE0270.severity = error # Null check can be simplified
dotnet_diagnostic.IDE0280.severity = error # Use 'nameof'
dotnet_diagnostic.IDE0290.severity = warning # Use primary constructor
dotnet_diagnostic.IDE0300.severity = error # Use collection expression for array
dotnet_diagnostic.IDE0301.severity = error # Use collection expression for empty
dotnet_diagnostic.IDE0302.severity = error # Use collection expression for stack alloc
dotnet_diagnostic.IDE0303.severity = error # Use collection expression for Create()
dotnet_diagnostic.IDE0304.severity = error # Use collection expression for builder
dotnet_diagnostic.IDE0305.severity = error # Use collection expression for fluent
dotnet_diagnostic.IDE0320.severity = error # Make anonymous function static

dotnet_diagnostic.SYSLIB1045.severity = error # Use GeneratedRegexAttribute to generate the regular expression implementation at compile time.

# C# Compiler warnings
dotnet_diagnostic.CS8618.severity = none # Non-nullable property must contain a non-null value when exiting constructor

# Ignore resharper rules for Rider
resharper_bad_parens_line_breaks_highlighting = none
resharper_multiple_spaces_highlighting = none
resharper_bad_list_line_breaks_highlighting = none
